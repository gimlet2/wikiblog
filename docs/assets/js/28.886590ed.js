(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{431:function(s,t,a){"use strict";a.r(t);var e=a(11),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("In my previous "),a("RouterLink",{attrs:{to:"/2018/03/26/java10/"}},[s._v("article")]),s._v(" I’ve been talking about using "),a("strong",[s._v("Java 10")]),s._v(" to build and run your "),a("a",{attrs:{href:"https://projects.spring.io/spring-boot/",target:"_blank",rel:"noopener noreferrer"}},[a("strong",[s._v("Spring Boot")]),a("OutboundLink")],1),s._v(" app. Now it is time to talk how to put it in Docker container. Better support of containerization was one of the main features of Java 10 release. So, let’s go!\n"),s._v("\nThat is fairly simple process, so just take a look on following code snippet:")],1),s._v(" "),a("div",{staticClass:"language-dockerfile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" debian:9-slim "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" builder")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" set -ex && "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("\n    apt-get update && apt-get install -y wget unzip && "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("\n    wget https://download.java.net/java/GA/jdk11/9/GPL/openjdk-11.0.2_linux-x64_bin.tar.gz -nv -O jdk.tar.gz -nv && "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("\n    mkdir -p /opt/jdk && "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("\n    tar zxvf jdk.tar.gz -C /opt/jdk --strip-components=1 && "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("\n    rm jdk.tar.gz && "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("\n    rm /opt/jdk/lib/src.zip")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" /opt/jdk/bin/jlink "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("\n    --module-path /opt/jdk/jmods "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("\n    --verbose "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("\n    --add-modules java.base,java.logging,java.xml,jdk.unsupported,java.sql,java.naming,java.desktop,java.management,java.security.jgss,java.instrument "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("\n    --output /opt/jdk-minimal "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("\n    --compress 2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("\n    --no-header-files")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Second stage, add only our custom jdk9 distro and our app")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" debian:9-slim")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token options"}},[a("span",{pre:!0,attrs:{class:"token property"}},[s._v("--from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("builder")])]),s._v(" /opt/jdk-minimal /opt/jdk-minimal")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENV")]),s._v(" JAVA_HOME=/opt/jdk-minimal")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENV")]),s._v(" PATH="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$PATH:$JAVA_HOME/bin"')])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENV")]),s._v(" APP_TIMEZONE=UTC")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPOSE")]),s._v(" 8080")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENTRYPOINT")]),s._v(" ["),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/launch.sh"')]),s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" launch.sh /")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" chmod +x /launch.sh")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" build/libs/you-app.jar /app.jar")]),s._v("\n")])])]),a("p",[s._v("Here, as you can see, I use multi-stage Docker build file. Quick note: multi-stage builds are supported with "),a("strong",[s._v("Docker 17.05")]),s._v(" or higher but result image is backward compatible(at least from my experience). On the first stage it downloads "),a("strong",[s._v("JDK")]),s._v(" from Oracle’s, but it can make sense to store your own copy somewhere closer to your build server since it isn’t that small — a little bit less then 200mb. So, it is downloaded, unziped and ready to be used. But not so quick.")]),s._v(" "),a("p",[s._v("As you probably remember, "),a("strong",[s._v("Java 9")]),s._v(" gave us module system and "),a("strong",[s._v("JDK")]),s._v(" itself is also modularized. That means we don’t have to bring whole "),a("strong",[s._v("JDK")]),s._v(" to production but we could build our own striped version specifically for our app’s needs. There is jlink tool provided for that. Just take a look how it is used in the build process. The modules listed there should be enough to run a typical "),a("strong",[s._v("Spring Boot")]),s._v(" application. In my production case I had to put java.scripting, jdk.scripting.nashorn to the list as well.")]),s._v(" "),a("p",[s._v("On the second stage it copies results from previous one, defines some environment variables, exposes port, copy launch.sh and app’s artifact. Not a rocket science at all.")]),s._v(" "),a("p",[s._v("And here is launch.sh script I’ve just mentioned:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/bin/bash")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("check_var")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" -z "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v('"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("&2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"error: missing environmental variable '),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$2")]),s._v('. exit"')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\ncheck_var "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${JAVA_XMS}")]),s._v('"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"JAVA_XMS"')]),s._v("\ncheck_var "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${JAVA_XMX}")]),s._v('"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"JAVA_XMX"')]),s._v("\ncheck_var "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${APP_TIMEZONE}")]),s._v('"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"APP_TIMEZONE"')]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("XMS")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${JAVA_XMS"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":-")]),s._v("none}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("XMX")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${JAVA_XMX"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":-")]),s._v("none}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("TIMEZONE")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${APP_TIMEZONE"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":-")]),s._v("none}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("JAVA_OPTS")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-Xmx'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${XMX}")]),s._v(" -Xms"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${XMS}")]),s._v(" -Duser.timezone="),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${TIMEZONE}")]),s._v(" -Dspring.profiles.active="),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${SPRING_PROFILES_ACTIVE}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${OPTIONS}")]),s._v('"')]),s._v("\n\njava "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${JAVA_OPTS}")]),s._v(" -jar /app.jar\n")])])]),a("p",[s._v("That is just a small helper to ensure that there are all important things provided, etc. But, sure, it is optional.")]),s._v(" "),a("p",[s._v("And that should be enough to put your app to the production. Please, put some comments down if you have some thoughts how to make it better!")])])}),[],!1,null,null,null);t.default=n.exports}}]);